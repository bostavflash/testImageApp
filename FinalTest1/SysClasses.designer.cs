#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FinalTest1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnet-FinalTest1-20140313135249")]
	public partial class SysClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAlbum(Album instance);
    partial void UpdateAlbum(Album instance);
    partial void DeleteAlbum(Album instance);
    partial void InsertArtist(Artist instance);
    partial void UpdateArtist(Artist instance);
    partial void DeleteArtist(Artist instance);
    partial void InsertKeyword(Keyword instance);
    partial void UpdateKeyword(Keyword instance);
    partial void DeleteKeyword(Keyword instance);
    partial void InsertPhotoKeyword(PhotoKeyword instance);
    partial void UpdatePhotoKeyword(PhotoKeyword instance);
    partial void DeletePhotoKeyword(PhotoKeyword instance);
    partial void InsertPhotoTag(PhotoTag instance);
    partial void UpdatePhotoTag(PhotoTag instance);
    partial void DeletePhotoTag(PhotoTag instance);
    partial void Inserttag(tag instance);
    partial void Updatetag(tag instance);
    partial void Deletetag(tag instance);
    partial void InsertUserPhoto(UserPhoto instance);
    partial void UpdateUserPhoto(UserPhoto instance);
    partial void DeleteUserPhoto(UserPhoto instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    #endregion
		
		public SysClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["aspnet_FinalTest1_20140313135249ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SysClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SysClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SysClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SysClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Album> Albums
		{
			get
			{
				return this.GetTable<Album>();
			}
		}
		
		public System.Data.Linq.Table<Artist> Artists
		{
			get
			{
				return this.GetTable<Artist>();
			}
		}
		
		public System.Data.Linq.Table<Keyword> Keywords
		{
			get
			{
				return this.GetTable<Keyword>();
			}
		}
		
		public System.Data.Linq.Table<PhotoKeyword> PhotoKeywords
		{
			get
			{
				return this.GetTable<PhotoKeyword>();
			}
		}
		
		public System.Data.Linq.Table<PhotoTag> PhotoTags
		{
			get
			{
				return this.GetTable<PhotoTag>();
			}
		}
		
		public System.Data.Linq.Table<tag> tags
		{
			get
			{
				return this.GetTable<tag>();
			}
		}
		
		public System.Data.Linq.Table<UserPhoto> UserPhotos
		{
			get
			{
				return this.GetTable<UserPhoto>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Album")]
	public partial class Album : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _artistID;
		
		private string _title;
		
		private EntitySet<Photo> _Photos;
		
		private EntityRef<Artist> _Artist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnartistIDChanging(long value);
    partial void OnartistIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public Album()
		{
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			this._Artist = default(EntityRef<Artist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_artistID", DbType="BigInt NOT NULL")]
		public long artistID
		{
			get
			{
				return this._artistID;
			}
			set
			{
				if ((this._artistID != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnartistIDChanging(value);
					this.SendPropertyChanging();
					this._artistID = value;
					this.SendPropertyChanged("artistID");
					this.OnartistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Photo", Storage="_Photos", ThisKey="Id", OtherKey="albumID")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Album", Storage="_Artist", ThisKey="artistID", OtherKey="Id", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.Albums.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.Albums.Add(this);
						this._artistID = value.Id;
					}
					else
					{
						this._artistID = default(long);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Album = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Album = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Artist")]
	public partial class Artist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _name;
		
		private EntitySet<Album> _Albums;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Artist()
		{
			this._Albums = new EntitySet<Album>(new Action<Album>(this.attach_Albums), new Action<Album>(this.detach_Albums));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Album", Storage="_Albums", ThisKey="Id", OtherKey="artistID")]
		public EntitySet<Album> Albums
		{
			get
			{
				return this._Albums;
			}
			set
			{
				this._Albums.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Albums(Album entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_Albums(Album entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Keyword")]
	public partial class Keyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _keywordText;
		
		private EntitySet<PhotoKeyword> _PhotoKeywords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnkeywordTextChanging(string value);
    partial void OnkeywordTextChanged();
    #endregion
		
		public Keyword()
		{
			this._PhotoKeywords = new EntitySet<PhotoKeyword>(new Action<PhotoKeyword>(this.attach_PhotoKeywords), new Action<PhotoKeyword>(this.detach_PhotoKeywords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keywordText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string keywordText
		{
			get
			{
				return this._keywordText;
			}
			set
			{
				if ((this._keywordText != value))
				{
					this.OnkeywordTextChanging(value);
					this.SendPropertyChanging();
					this._keywordText = value;
					this.SendPropertyChanged("keywordText");
					this.OnkeywordTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keyword_PhotoKeyword", Storage="_PhotoKeywords", ThisKey="Id", OtherKey="keyword_keywordID")]
		public EntitySet<PhotoKeyword> PhotoKeywords
		{
			get
			{
				return this._PhotoKeywords;
			}
			set
			{
				this._PhotoKeywords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhotoKeywords(PhotoKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Keyword = this;
		}
		
		private void detach_PhotoKeywords(PhotoKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Keyword = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoKeywords")]
	public partial class PhotoKeyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private long _photo_photoID;
		
		private int _keyword_keywordID;
		
		private EntityRef<Keyword> _Keyword;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onphoto_photoIDChanging(long value);
    partial void Onphoto_photoIDChanged();
    partial void Onkeyword_keywordIDChanging(int value);
    partial void Onkeyword_keywordIDChanged();
    #endregion
		
		public PhotoKeyword()
		{
			this._Keyword = default(EntityRef<Keyword>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo_photoID", DbType="BigInt NOT NULL")]
		public long photo_photoID
		{
			get
			{
				return this._photo_photoID;
			}
			set
			{
				if ((this._photo_photoID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onphoto_photoIDChanging(value);
					this.SendPropertyChanging();
					this._photo_photoID = value;
					this.SendPropertyChanged("photo_photoID");
					this.Onphoto_photoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword_keywordID", DbType="Int NOT NULL")]
		public int keyword_keywordID
		{
			get
			{
				return this._keyword_keywordID;
			}
			set
			{
				if ((this._keyword_keywordID != value))
				{
					if (this._Keyword.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onkeyword_keywordIDChanging(value);
					this.SendPropertyChanging();
					this._keyword_keywordID = value;
					this.SendPropertyChanged("keyword_keywordID");
					this.Onkeyword_keywordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keyword_PhotoKeyword", Storage="_Keyword", ThisKey="keyword_keywordID", OtherKey="Id", IsForeignKey=true)]
		public Keyword Keyword
		{
			get
			{
				return this._Keyword.Entity;
			}
			set
			{
				Keyword previousValue = this._Keyword.Entity;
				if (((previousValue != value) 
							|| (this._Keyword.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Keyword.Entity = null;
						previousValue.PhotoKeywords.Remove(this);
					}
					this._Keyword.Entity = value;
					if ((value != null))
					{
						value.PhotoKeywords.Add(this);
						this._keyword_keywordID = value.Id;
					}
					else
					{
						this._keyword_keywordID = default(int);
					}
					this.SendPropertyChanged("Keyword");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_PhotoKeyword", Storage="_Photo", ThisKey="photo_photoID", OtherKey="Id", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.PhotoKeywords.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.PhotoKeywords.Add(this);
						this._photo_photoID = value.Id;
					}
					else
					{
						this._photo_photoID = default(long);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoTags")]
	public partial class PhotoTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private long _photo_photoID;
		
		private int _tag_tagID;
		
		private EntityRef<tag> _tag;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onphoto_photoIDChanging(long value);
    partial void Onphoto_photoIDChanged();
    partial void Ontag_tagIDChanging(int value);
    partial void Ontag_tagIDChanged();
    #endregion
		
		public PhotoTag()
		{
			this._tag = default(EntityRef<tag>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo_photoID", DbType="BigInt NOT NULL")]
		public long photo_photoID
		{
			get
			{
				return this._photo_photoID;
			}
			set
			{
				if ((this._photo_photoID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onphoto_photoIDChanging(value);
					this.SendPropertyChanging();
					this._photo_photoID = value;
					this.SendPropertyChanged("photo_photoID");
					this.Onphoto_photoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag_tagID", DbType="Int NOT NULL")]
		public int tag_tagID
		{
			get
			{
				return this._tag_tagID;
			}
			set
			{
				if ((this._tag_tagID != value))
				{
					if (this._tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontag_tagIDChanging(value);
					this.SendPropertyChanging();
					this._tag_tagID = value;
					this.SendPropertyChanged("tag_tagID");
					this.Ontag_tagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tag_PhotoTag", Storage="_tag", ThisKey="tag_tagID", OtherKey="Id", IsForeignKey=true)]
		public tag tag
		{
			get
			{
				return this._tag.Entity;
			}
			set
			{
				tag previousValue = this._tag.Entity;
				if (((previousValue != value) 
							|| (this._tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tag.Entity = null;
						previousValue.PhotoTags.Remove(this);
					}
					this._tag.Entity = value;
					if ((value != null))
					{
						value.PhotoTags.Add(this);
						this._tag_tagID = value.Id;
					}
					else
					{
						this._tag_tagID = default(int);
					}
					this.SendPropertyChanged("tag");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_PhotoTag", Storage="_Photo", ThisKey="photo_photoID", OtherKey="Id", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.PhotoTags.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.PhotoTags.Add(this);
						this._photo_photoID = value.Id;
					}
					else
					{
						this._photo_photoID = default(long);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tags")]
	public partial class tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _tagText;
		
		private EntitySet<PhotoTag> _PhotoTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OntagTextChanging(string value);
    partial void OntagTextChanged();
    #endregion
		
		public tag()
		{
			this._PhotoTags = new EntitySet<PhotoTag>(new Action<PhotoTag>(this.attach_PhotoTags), new Action<PhotoTag>(this.detach_PhotoTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tagText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string tagText
		{
			get
			{
				return this._tagText;
			}
			set
			{
				if ((this._tagText != value))
				{
					this.OntagTextChanging(value);
					this.SendPropertyChanging();
					this._tagText = value;
					this.SendPropertyChanged("tagText");
					this.OntagTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tag_PhotoTag", Storage="_PhotoTags", ThisKey="Id", OtherKey="tag_tagID")]
		public EntitySet<PhotoTag> PhotoTags
		{
			get
			{
				return this._PhotoTags;
			}
			set
			{
				this._PhotoTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhotoTags(PhotoTag entity)
		{
			this.SendPropertyChanging();
			entity.tag = this;
		}
		
		private void detach_PhotoTags(PhotoTag entity)
		{
			this.SendPropertyChanging();
			entity.tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPhotos")]
	public partial class UserPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private long _user_userID;
		
		private long _photo_photoID;
		
		private EntityRef<Photo> _Photo;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onuser_userIDChanging(long value);
    partial void Onuser_userIDChanged();
    partial void Onphoto_photoIDChanging(long value);
    partial void Onphoto_photoIDChanged();
    #endregion
		
		public UserPhoto()
		{
			this._Photo = default(EntityRef<Photo>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_userID", DbType="BigInt NOT NULL")]
		public long user_userID
		{
			get
			{
				return this._user_userID;
			}
			set
			{
				if ((this._user_userID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_userIDChanging(value);
					this.SendPropertyChanging();
					this._user_userID = value;
					this.SendPropertyChanged("user_userID");
					this.Onuser_userIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo_photoID", DbType="BigInt NOT NULL")]
		public long photo_photoID
		{
			get
			{
				return this._photo_photoID;
			}
			set
			{
				if ((this._photo_photoID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onphoto_photoIDChanging(value);
					this.SendPropertyChanging();
					this._photo_photoID = value;
					this.SendPropertyChanged("photo_photoID");
					this.Onphoto_photoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_UserPhoto", Storage="_Photo", ThisKey="photo_photoID", OtherKey="Id", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.UserPhotos.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.UserPhotos.Add(this);
						this._photo_photoID = value.Id;
					}
					else
					{
						this._photo_photoID = default(long);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserPhoto", Storage="_UserProfile", ThisKey="user_userID", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserPhotos.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserPhotos.Add(this);
						this._user_userID = value.UserId;
					}
					else
					{
						this._user_userID = default(long);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photo")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _title;
		
		private int _likesNO;
		
		private int _commentsNO;
		
		private System.Nullable<int> _sharesNO;
		
		private long _albumID;
		
		private string _dateAndTime;
		
		private string _Source;
		
		private EntitySet<PhotoKeyword> _PhotoKeywords;
		
		private EntitySet<PhotoTag> _PhotoTags;
		
		private EntitySet<UserPhoto> _UserPhotos;
		
		private EntityRef<Album> _Album;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnlikesNOChanging(int value);
    partial void OnlikesNOChanged();
    partial void OncommentsNOChanging(int value);
    partial void OncommentsNOChanged();
    partial void OnsharesNOChanging(System.Nullable<int> value);
    partial void OnsharesNOChanged();
    partial void OnalbumIDChanging(long value);
    partial void OnalbumIDChanged();
    partial void OndateAndTimeChanging(string value);
    partial void OndateAndTimeChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public Photo()
		{
			this._PhotoKeywords = new EntitySet<PhotoKeyword>(new Action<PhotoKeyword>(this.attach_PhotoKeywords), new Action<PhotoKeyword>(this.detach_PhotoKeywords));
			this._PhotoTags = new EntitySet<PhotoTag>(new Action<PhotoTag>(this.attach_PhotoTags), new Action<PhotoTag>(this.detach_PhotoTags));
			this._UserPhotos = new EntitySet<UserPhoto>(new Action<UserPhoto>(this.attach_UserPhotos), new Action<UserPhoto>(this.detach_UserPhotos));
			this._Album = default(EntityRef<Album>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(MAX)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_likesNO", DbType="Int NOT NULL")]
		public int likesNO
		{
			get
			{
				return this._likesNO;
			}
			set
			{
				if ((this._likesNO != value))
				{
					this.OnlikesNOChanging(value);
					this.SendPropertyChanging();
					this._likesNO = value;
					this.SendPropertyChanged("likesNO");
					this.OnlikesNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentsNO", DbType="Int NOT NULL")]
		public int commentsNO
		{
			get
			{
				return this._commentsNO;
			}
			set
			{
				if ((this._commentsNO != value))
				{
					this.OncommentsNOChanging(value);
					this.SendPropertyChanging();
					this._commentsNO = value;
					this.SendPropertyChanged("commentsNO");
					this.OncommentsNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sharesNO", DbType="Int")]
		public System.Nullable<int> sharesNO
		{
			get
			{
				return this._sharesNO;
			}
			set
			{
				if ((this._sharesNO != value))
				{
					this.OnsharesNOChanging(value);
					this.SendPropertyChanging();
					this._sharesNO = value;
					this.SendPropertyChanged("sharesNO");
					this.OnsharesNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albumID", DbType="BigInt NOT NULL")]
		public long albumID
		{
			get
			{
				return this._albumID;
			}
			set
			{
				if ((this._albumID != value))
				{
					if (this._Album.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnalbumIDChanging(value);
					this.SendPropertyChanging();
					this._albumID = value;
					this.SendPropertyChanged("albumID");
					this.OnalbumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAndTime", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string dateAndTime
		{
			get
			{
				return this._dateAndTime;
			}
			set
			{
				if ((this._dateAndTime != value))
				{
					this.OndateAndTimeChanging(value);
					this.SendPropertyChanging();
					this._dateAndTime = value;
					this.SendPropertyChanged("dateAndTime");
					this.OndateAndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_PhotoKeyword", Storage="_PhotoKeywords", ThisKey="Id", OtherKey="photo_photoID")]
		public EntitySet<PhotoKeyword> PhotoKeywords
		{
			get
			{
				return this._PhotoKeywords;
			}
			set
			{
				this._PhotoKeywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_PhotoTag", Storage="_PhotoTags", ThisKey="Id", OtherKey="photo_photoID")]
		public EntitySet<PhotoTag> PhotoTags
		{
			get
			{
				return this._PhotoTags;
			}
			set
			{
				this._PhotoTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_UserPhoto", Storage="_UserPhotos", ThisKey="Id", OtherKey="photo_photoID")]
		public EntitySet<UserPhoto> UserPhotos
		{
			get
			{
				return this._UserPhotos;
			}
			set
			{
				this._UserPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Photo", Storage="_Album", ThisKey="albumID", OtherKey="Id", IsForeignKey=true)]
		public Album Album
		{
			get
			{
				return this._Album.Entity;
			}
			set
			{
				Album previousValue = this._Album.Entity;
				if (((previousValue != value) 
							|| (this._Album.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Album.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._Album.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._albumID = value.Id;
					}
					else
					{
						this._albumID = default(long);
					}
					this.SendPropertyChanged("Album");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhotoKeywords(PhotoKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_PhotoKeywords(PhotoKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_PhotoTags(PhotoTag entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_PhotoTags(PhotoTag entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_UserPhotos(UserPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_UserPhotos(UserPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserId;
		
		private string _UserName;
		
		private string _birthday;
		
		private string _gender;
		
		private string _name;
		
		private string _location;
		
		private EntitySet<UserPhoto> _UserPhotos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnbirthdayChanging(string value);
    partial void OnbirthdayChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    #endregion
		
		public UserProfile()
		{
			this._UserPhotos = new EntitySet<UserPhoto>(new Action<UserPhoto>(this.attach_UserPhotos), new Action<UserPhoto>(this.detach_UserPhotos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(MAX)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthday", DbType="VarChar(50)")]
		public string birthday
		{
			get
			{
				return this._birthday;
			}
			set
			{
				if ((this._birthday != value))
				{
					this.OnbirthdayChanging(value);
					this.SendPropertyChanging();
					this._birthday = value;
					this.SendPropertyChanged("birthday");
					this.OnbirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="VarChar(10)")]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="VarChar(MAX)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserPhoto", Storage="_UserPhotos", ThisKey="UserId", OtherKey="user_userID")]
		public EntitySet<UserPhoto> UserPhotos
		{
			get
			{
				return this._UserPhotos;
			}
			set
			{
				this._UserPhotos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPhotos(UserPhoto entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_UserPhotos(UserPhoto entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
}
#pragma warning restore 1591
